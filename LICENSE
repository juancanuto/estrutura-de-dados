The MIT License (MIT)

Copyright (c) 2016 Juan Canuto Hassam

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.




------------------------------------------------------------------------------------------------------------------------------------
import unittest

def _quick_recursivo(seq, inicio, final):
    if inicio >= final:
        return seq

    indice_pivot=final
    pivot=seq[-1]
    i_menor=inicio
    i_maior=final-1



    #posicionar pivot
    # indice [0] == inicio i_menor
    #indice [-1] == pivot
    #indice final-1  == i_maior
#imenor tem valor 0 , o imaior tem o valor do fim -1 , if imenor < imaior , imenor+=1 , imaior-=1 , quando o imenor não for < fazer o swap com o imaior,
# se o imenor for maior que o pivot , comparar o imaior com o proximo a esquerda e quando for menor fazer a troca , incrementa posição do imenor e decrementa i maior.
# quando o i_menor for = imaior , o count , mandar o pivot pra posição do i_menor.
#indice do pivot -1 é o começo da metade maior da lista
# inicio = inicio.

def quick_sort(seq):
    return _quick_recursivo(seq,0,len(seq)-1)


class OrdenacaoTestes(unittest.TestCase):
    def teste_lista_vazia(self):
        self.assertListEqual([], quick_sort([]))

    def teste_lista_unitaria(self):
        self.assertListEqual([1], quick_sort([1]))

    def teste_lista_binaria(self):
        self.assertListEqual([1, 2], quick_sort([2, 1]))

    def teste_lista_desordenada(self):
        self.assertListEqual([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], quick_sort([9, 7, 1, 8, 5, 3, 6, 4, 2, 0]))


if __name__ == '__main__':
    unittest.main()
